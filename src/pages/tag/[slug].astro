---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import BlogRow from '@/components/BlogRow.astro'
import Container from '@/components/ui/Container.astro'
import Layout from '@/layouts/Layout.astro'
import type { GetStaticPaths } from 'astro'
import { compareDesc } from 'date-fns'

interface Props {
  tag: CollectionEntry<'tags'>
}

export async function getStaticPaths(): Promise<ReturnType<GetStaticPaths>> {
  const tags = await getCollection('tags')

  return tags.map((tag) => ({ params: { slug: tag.slug }, props: { tag } }))
}

const { tag } = Astro.props

const otherTags = await getCollection('tags', (entry) => entry.slug !== tag.slug)
otherTags.sort((a, b) => a.slug.localeCompare(b.slug))
const posts = await getCollection(
  'blog',
  ({ data }) => data.status === 'published' && data.tag.slug === tag.slug,
)
posts.sort((a, b) => compareDesc(a.data.date, b.data.date))
---

<Layout title={tag.data.title} description={tag.data.description}>
  <section>
    <Container size="tight" class="-mt-6 flex flex-col gap-8 text-center">
      <h1 class="text-2xl font-extrabold text-green-600">#{tag.data.title}</h1>

      <div class="leading-6 dark:text-white">{tag.data.description}</div>

      <div>
        <span class="mr-2 mt-2 font-bold dark:text-white">More:</span>
        {
          otherTags.map((tag) => (
            <a
              href={`/tag/${tag.slug}`}
              class="ml-1 break-keep font-bold text-neutral-500 hover:text-neutral-400 dark:text-neutral-500 dark:hover:text-neutral-400"
            >
              #{tag.data.title}
            </a>
          ))
        }
      </div>
    </Container>

    <div class="flex grow py-14">
      <Container
        size="tight"
        class="divide-y divide-slate-200 dark:divide-neutral-700"
      >
        {posts.map((post) => <BlogRow {post} />)}
      </Container>
    </div>
  </section>
</Layout>
